//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace CursoCSharpModuloII.ADONET {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [Serializable()]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet")]
    [HelpKeyword("vs.data.DataSet")]
    public partial class DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet : DataSet {
        
        private CategoriaDataTable tableCategoria;
        
        private ProdutoDataTable tableProduto;
        
        private DataRelation relationFK_Categoria_Produto;
        
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet() {
            this.BeginInit();
            this.InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet(SerializationInfo info, StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = new CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Categoria"] != null)) {
                    base.Tables.Add(new CategoriaDataTable(ds.Tables["Categoria"]));
                }
                if ((ds.Tables["Produto"] != null)) {
                    base.Tables.Add(new ProdutoDataTable(ds.Tables["Produto"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CategoriaDataTable Categoria {
            get {
                return this.tableCategoria;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ProdutoDataTable Produto {
            get {
                return this.tableProduto;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone() {
            DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet cln = ((DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                DataSet ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Categoria"] != null)) {
                    base.Tables.Add(new CategoriaDataTable(ds.Tables["Categoria"]));
                }
                if ((ds.Tables["Produto"] != null)) {
                    base.Tables.Add(new ProdutoDataTable(ds.Tables["Produto"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override XmlSchema GetSchemaSerializable() {
            MemoryStream stream = new MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCategoria = ((CategoriaDataTable)(base.Tables["Categoria"]));
            if ((initTable == true)) {
                if ((this.tableCategoria != null)) {
                    this.tableCategoria.InitVars();
                }
            }
            this.tableProduto = ((ProdutoDataTable)(base.Tables["Produto"]));
            if ((initTable == true)) {
                if ((this.tableProduto != null)) {
                    this.tableProduto.InitVars();
                }
            }
            this.relationFK_Categoria_Produto = this.Relations["FK_Categoria_Produto"];
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            this.tableCategoria = new CategoriaDataTable();
            base.Tables.Add(this.tableCategoria);
            this.tableProduto = new ProdutoDataTable();
            base.Tables.Add(this.tableProduto);
            this.relationFK_Categoria_Produto = new DataRelation("FK_Categoria_Produto", new DataColumn[] {
                        this.tableCategoria.CodigoColumn}, new DataColumn[] {
                        this.tableProduto.CategoriaColumn}, false);
            this.Relations.Add(this.relationFK_Categoria_Produto);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCategoria() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeProduto() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e) {
            if ((e.Action == CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs) {
            DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet ds = new DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaAny any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                MemoryStream s1 = new MemoryStream();
                MemoryStream s2 = new MemoryStream();
                try {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CategoriaRowChangeEventHandler(object sender, CategoriaRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProdutoRowChangeEventHandler(object sender, ProdutoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class CategoriaDataTable : TypedTableBase<CategoriaRow> {
            
            private DataColumn columnID;
            
            private DataColumn columnCodigo;
            
            private DataColumn columnDescricao;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaDataTable() {
                this.TableName = "Categoria";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CategoriaDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CategoriaDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodigoColumn {
                get {
                    return this.columnCodigo;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DescricaoColumn {
                get {
                    return this.columnDescricao;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRow this[int index] {
                get {
                    return ((CategoriaRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CategoriaRowChangeEventHandler CategoriaRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CategoriaRowChangeEventHandler CategoriaRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CategoriaRowChangeEventHandler CategoriaRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CategoriaRowChangeEventHandler CategoriaRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCategoriaRow(CategoriaRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRow AddCategoriaRow(string Codigo, string Descricao) {
                CategoriaRow rowCategoriaRow = ((CategoriaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Codigo,
                        Descricao};
                rowCategoriaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategoriaRow);
                return rowCategoriaRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRow FindByCodigo(string Codigo) {
                return ((CategoriaRow)(this.Rows.Find(new object[] {
                            Codigo})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                CategoriaDataTable cln = ((CategoriaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new CategoriaDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCodigo = base.Columns["Codigo"];
                this.columnDescricao = base.Columns["Descricao"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCodigo = new DataColumn("Codigo", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCodigo);
                this.columnDescricao = new DataColumn("Descricao", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDescricao);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCodigo}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnCodigo.AllowDBNull = false;
                this.columnCodigo.Unique = true;
                this.columnCodigo.MaxLength = 20;
                this.columnDescricao.AllowDBNull = false;
                this.columnDescricao.MaxLength = 100;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRow NewCategoriaRow() {
                return ((CategoriaRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CategoriaRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(CategoriaRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoriaRowChanged != null)) {
                    this.CategoriaRowChanged(this, new CategoriaRowChangeEvent(((CategoriaRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoriaRowChanging != null)) {
                    this.CategoriaRowChanging(this, new CategoriaRowChangeEvent(((CategoriaRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoriaRowDeleted != null)) {
                    this.CategoriaRowDeleted(this, new CategoriaRowChangeEvent(((CategoriaRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoriaRowDeleting != null)) {
                    this.CategoriaRowDeleting(this, new CategoriaRowChangeEvent(((CategoriaRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCategoriaRow(CategoriaRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet ds = new DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoriaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ProdutoDataTable : TypedTableBase<ProdutoRow> {
            
            private DataColumn columnID;
            
            private DataColumn columnCodigoFabricacao;
            
            private DataColumn columnNomeProduto;
            
            private DataColumn columnCategoria;
            
            private DataColumn columnPeso;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoDataTable() {
                this.TableName = "Produto";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProdutoDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ProdutoDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodigoFabricacaoColumn {
                get {
                    return this.columnCodigoFabricacao;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NomeProdutoColumn {
                get {
                    return this.columnNomeProduto;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CategoriaColumn {
                get {
                    return this.columnCategoria;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PesoColumn {
                get {
                    return this.columnPeso;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRow this[int index] {
                get {
                    return ((ProdutoRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProdutoRowChangeEventHandler ProdutoRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProdutoRowChangeEventHandler ProdutoRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProdutoRowChangeEventHandler ProdutoRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProdutoRowChangeEventHandler ProdutoRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddProdutoRow(ProdutoRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRow AddProdutoRow(string CodigoFabricacao, string NomeProduto, CategoriaRow parentCategoriaRowByFK_Categoria_Produto, double Peso) {
                ProdutoRow rowProdutoRow = ((ProdutoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CodigoFabricacao,
                        NomeProduto,
                        null,
                        Peso};
                if ((parentCategoriaRowByFK_Categoria_Produto != null)) {
                    columnValuesArray[3] = parentCategoriaRowByFK_Categoria_Produto[1];
                }
                rowProdutoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProdutoRow);
                return rowProdutoRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRow FindByCodigoFabricacao(string CodigoFabricacao) {
                return ((ProdutoRow)(this.Rows.Find(new object[] {
                            CodigoFabricacao})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                ProdutoDataTable cln = ((ProdutoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new ProdutoDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCodigoFabricacao = base.Columns["CodigoFabricacao"];
                this.columnNomeProduto = base.Columns["NomeProduto"];
                this.columnCategoria = base.Columns["Categoria"];
                this.columnPeso = base.Columns["Peso"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCodigoFabricacao = new DataColumn("CodigoFabricacao", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCodigoFabricacao);
                this.columnNomeProduto = new DataColumn("NomeProduto", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNomeProduto);
                this.columnCategoria = new DataColumn("Categoria", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCategoria);
                this.columnPeso = new DataColumn("Peso", typeof(double), null, MappingType.Element);
                base.Columns.Add(this.columnPeso);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCodigoFabricacao}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnCodigoFabricacao.AllowDBNull = false;
                this.columnCodigoFabricacao.Unique = true;
                this.columnCodigoFabricacao.MaxLength = 20;
                this.columnNomeProduto.AllowDBNull = false;
                this.columnNomeProduto.MaxLength = 100;
                this.columnCategoria.AllowDBNull = false;
                this.columnCategoria.MaxLength = 20;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRow NewProdutoRow() {
                return ((ProdutoRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProdutoRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(ProdutoRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProdutoRowChanged != null)) {
                    this.ProdutoRowChanged(this, new ProdutoRowChangeEvent(((ProdutoRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProdutoRowChanging != null)) {
                    this.ProdutoRowChanging(this, new ProdutoRowChangeEvent(((ProdutoRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProdutoRowDeleted != null)) {
                    this.ProdutoRowDeleted(this, new ProdutoRowChangeEvent(((ProdutoRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProdutoRowDeleting != null)) {
                    this.ProdutoRowDeleting(this, new ProdutoRowChangeEvent(((ProdutoRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProdutoRow(ProdutoRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet ds = new DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProdutoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CategoriaRow : DataRow {
            
            private CategoriaDataTable tableCategoria;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CategoriaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoria = ((CategoriaDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID {
                get {
                    return ((int)(this[this.tableCategoria.IDColumn]));
                }
                set {
                    this[this.tableCategoria.IDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Codigo {
                get {
                    return ((string)(this[this.tableCategoria.CodigoColumn]));
                }
                set {
                    this[this.tableCategoria.CodigoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Descricao {
                get {
                    return ((string)(this[this.tableCategoria.DescricaoColumn]));
                }
                set {
                    this[this.tableCategoria.DescricaoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRow[] GetProdutoRows() {
                if ((this.Table.ChildRelations["FK_Categoria_Produto"] == null)) {
                    return new ProdutoRow[0];
                }
                else {
                    return ((ProdutoRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Categoria_Produto"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ProdutoRow : DataRow {
            
            private ProdutoDataTable tableProduto;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProdutoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduto = ((ProdutoDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID {
                get {
                    return ((int)(this[this.tableProduto.IDColumn]));
                }
                set {
                    this[this.tableProduto.IDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CodigoFabricacao {
                get {
                    return ((string)(this[this.tableProduto.CodigoFabricacaoColumn]));
                }
                set {
                    this[this.tableProduto.CodigoFabricacaoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NomeProduto {
                get {
                    return ((string)(this[this.tableProduto.NomeProdutoColumn]));
                }
                set {
                    this[this.tableProduto.NomeProdutoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Categoria {
                get {
                    return ((string)(this[this.tableProduto.CategoriaColumn]));
                }
                set {
                    this[this.tableProduto.CategoriaColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Peso {
                get {
                    try {
                        return ((double)(this[this.tableProduto.PesoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Peso\' in table \'Produto\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduto.PesoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRow CategoriaRow {
                get {
                    return ((CategoriaRow)(this.GetParentRow(this.Table.ParentRelations["FK_Categoria_Produto"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Categoria_Produto"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPesoNull() {
                return this.IsNull(this.tableProduto.PesoColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPesoNull() {
                this[this.tableProduto.PesoColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CategoriaRowChangeEvent : EventArgs {
            
            private CategoriaRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRowChangeEvent(CategoriaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CategoriaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProdutoRowChangeEvent : EventArgs {
            
            private ProdutoRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRowChangeEvent(ProdutoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProdutoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CursoCSharpModuloII.ADONET.DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class CategoriaTableAdapter : Component {
        
        private SqlDataAdapter _adapter;
        
        private SqlConnection _connection;
        
        private SqlTransaction _transaction;
        
        private SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CategoriaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new SqlDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Categoria";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Codigo", "Codigo");
            tableMapping.ColumnMappings.Add("Descricao", "Descricao");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Categoria] WHERE (([ID] = @Original_ID) AND ([Codigo] = @Origi" +
                "nal_Codigo) AND ([Descricao] = @Original_Descricao))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_ID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "ID", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Codigo", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_Descricao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descricao", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Categoria] ([Codigo], [Descricao]) VALUES (@Codigo, @Descricao" +
                ");\r\nSELECT ID, Codigo, Descricao FROM Categoria WHERE (Codigo = @Codigo)";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Codigo", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Descricao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descricao", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Categoria] SET [Codigo] = @Codigo, [Descricao] = @Descricao WHERE (" +
                "([ID] = @Original_ID) AND ([Codigo] = @Original_Codigo) AND ([Descricao] = @Orig" +
                "inal_Descricao));\r\nSELECT ID, Codigo, Descricao FROM Categoria WHERE (Codigo = @" +
                "Codigo)";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Codigo", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Descricao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descricao", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_ID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "ID", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Codigo", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_Descricao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descricao", DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = "Data Source=JRCARVALHOVAIO\\SQLEXPRESS;Initial Catalog=DB_EXERCICIO_MODII_CATEGORI" +
                "A_PRODUTO;Integrated Security=True";
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new SqlCommand[1];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Codigo, Descricao FROM dbo.Categoria";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.CategoriaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.CategoriaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.CategoriaDataTable dataTable = new DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.CategoriaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.CategoriaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet dataSet) {
            return this.Adapter.Update(dataSet, "Categoria");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                        dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_Codigo, string Original_Descricao) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_Codigo == null)) {
                throw new ArgumentNullException("Original_Codigo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Codigo));
            }
            if ((Original_Descricao == null)) {
                throw new ArgumentNullException("Original_Descricao");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Descricao));
            }
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Codigo, string Descricao) {
            if ((Codigo == null)) {
                throw new ArgumentNullException("Codigo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Codigo));
            }
            if ((Descricao == null)) {
                throw new ArgumentNullException("Descricao");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Descricao));
            }
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string Codigo, string Descricao, int Original_ID, string Original_Codigo, string Original_Descricao) {
            if ((Codigo == null)) {
                throw new ArgumentNullException("Codigo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Codigo));
            }
            if ((Descricao == null)) {
                throw new ArgumentNullException("Descricao");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Descricao));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_Codigo == null)) {
                throw new ArgumentNullException("Original_Codigo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Codigo));
            }
            if ((Original_Descricao == null)) {
                throw new ArgumentNullException("Original_Descricao");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Descricao));
            }
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string Descricao, int Original_ID, string Original_Codigo, string Original_Descricao) {
            return this.Update(Original_Codigo, Descricao, Original_ID, Original_Codigo, Original_Descricao);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class ProdutoTableAdapter : Component {
        
        private SqlDataAdapter _adapter;
        
        private SqlConnection _connection;
        
        private SqlTransaction _transaction;
        
        private SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ProdutoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new SqlDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Produto";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("CodigoFabricacao", "CodigoFabricacao");
            tableMapping.ColumnMappings.Add("NomeProduto", "NomeProduto");
            tableMapping.ColumnMappings.Add("Categoria", "Categoria");
            tableMapping.ColumnMappings.Add("Peso", "Peso");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Produto] WHERE (([ID] = @Original_ID) AND ([CodigoFabricacao] = @Original_CodigoFabricacao) AND ([NomeProduto] = @Original_NomeProduto) AND ([Categoria] = @Original_Categoria) AND ((@IsNull_Peso = 1 AND [Peso] IS NULL) OR ([Peso] = @Original_Peso)))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_ID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "ID", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_CodigoFabricacao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoFabricacao", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_NomeProduto", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "NomeProduto", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_Categoria", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Categoria", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@IsNull_Peso", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Peso", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_Peso", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Peso", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Produto] ([CodigoFabricacao], [NomeProduto], [Categoria], [Peso]) VALUES (@CodigoFabricacao, @NomeProduto, @Categoria, @Peso);
SELECT ID, CodigoFabricacao, NomeProduto, Categoria, Peso FROM Produto WHERE (CodigoFabricacao = @CodigoFabricacao)";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CodigoFabricacao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoFabricacao", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NomeProduto", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "NomeProduto", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Categoria", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Categoria", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Peso", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Peso", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Produto] SET [CodigoFabricacao] = @CodigoFabricacao, [NomeProduto] = @NomeProduto, [Categoria] = @Categoria, [Peso] = @Peso WHERE (([ID] = @Original_ID) AND ([CodigoFabricacao] = @Original_CodigoFabricacao) AND ([NomeProduto] = @Original_NomeProduto) AND ([Categoria] = @Original_Categoria) AND ((@IsNull_Peso = 1 AND [Peso] IS NULL) OR ([Peso] = @Original_Peso)));
SELECT ID, CodigoFabricacao, NomeProduto, Categoria, Peso FROM Produto WHERE (CodigoFabricacao = @CodigoFabricacao)";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CodigoFabricacao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoFabricacao", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NomeProduto", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "NomeProduto", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Categoria", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Categoria", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Peso", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Peso", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_ID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "ID", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_CodigoFabricacao", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoFabricacao", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_NomeProduto", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "NomeProduto", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_Categoria", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Categoria", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@IsNull_Peso", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Peso", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_Peso", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Peso", DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = "Data Source=JRCARVALHOVAIO\\SQLEXPRESS;Initial Catalog=DB_EXERCICIO_MODII_CATEGORI" +
                "A_PRODUTO;Integrated Security=True";
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new SqlCommand[1];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, CodigoFabricacao, NomeProduto, Categoria, Peso FROM dbo.Produto";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.ProdutoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.ProdutoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.ProdutoDataTable dataTable = new DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.ProdutoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet.ProdutoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet dataSet) {
            return this.Adapter.Update(dataSet, "Produto");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                        dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_CodigoFabricacao, string Original_NomeProduto, string Original_Categoria, Nullable<double> Original_Peso) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_CodigoFabricacao == null)) {
                throw new ArgumentNullException("Original_CodigoFabricacao");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CodigoFabricacao));
            }
            if ((Original_NomeProduto == null)) {
                throw new ArgumentNullException("Original_NomeProduto");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NomeProduto));
            }
            if ((Original_Categoria == null)) {
                throw new ArgumentNullException("Original_Categoria");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Categoria));
            }
            if ((Original_Peso.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_Peso.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
            }
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CodigoFabricacao, string NomeProduto, string Categoria, Nullable<double> Peso) {
            if ((CodigoFabricacao == null)) {
                throw new ArgumentNullException("CodigoFabricacao");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CodigoFabricacao));
            }
            if ((NomeProduto == null)) {
                throw new ArgumentNullException("NomeProduto");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NomeProduto));
            }
            if ((Categoria == null)) {
                throw new ArgumentNullException("Categoria");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Categoria));
            }
            if ((Peso.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(Peso.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string CodigoFabricacao, string NomeProduto, string Categoria, Nullable<double> Peso, int Original_ID, string Original_CodigoFabricacao, string Original_NomeProduto, string Original_Categoria, Nullable<double> Original_Peso) {
            if ((CodigoFabricacao == null)) {
                throw new ArgumentNullException("CodigoFabricacao");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CodigoFabricacao));
            }
            if ((NomeProduto == null)) {
                throw new ArgumentNullException("NomeProduto");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NomeProduto));
            }
            if ((Categoria == null)) {
                throw new ArgumentNullException("Categoria");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Categoria));
            }
            if ((Peso.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(Peso.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_CodigoFabricacao == null)) {
                throw new ArgumentNullException("Original_CodigoFabricacao");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_CodigoFabricacao));
            }
            if ((Original_NomeProduto == null)) {
                throw new ArgumentNullException("Original_NomeProduto");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_NomeProduto));
            }
            if ((Original_Categoria == null)) {
                throw new ArgumentNullException("Original_Categoria");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Categoria));
            }
            if ((Original_Peso.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Original_Peso.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string NomeProduto, string Categoria, Nullable<double> Peso, int Original_ID, string Original_CodigoFabricacao, string Original_NomeProduto, string Original_Categoria, Nullable<double> Original_Peso) {
            return this.Update(Original_CodigoFabricacao, NomeProduto, Categoria, Peso, Original_ID, Original_CodigoFabricacao, Original_NomeProduto, Original_Categoria, Original_Peso);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CategoriaTableAdapter _categoriaTableAdapter;
        
        private ProdutoTableAdapter _produtoTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private IDbConnection _connection;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CategoriaTableAdapter CategoriaTableAdapter {
            get {
                return this._categoriaTableAdapter;
            }
            set {
                this._categoriaTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ProdutoTableAdapter ProdutoTableAdapter {
            get {
                return this._produtoTableAdapter;
            }
            set {
                this._produtoTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._categoriaTableAdapter != null) 
                            && (this._categoriaTableAdapter.Connection != null))) {
                    return this._categoriaTableAdapter.Connection;
                }
                if (((this._produtoTableAdapter != null) 
                            && (this._produtoTableAdapter.Connection != null))) {
                    return this._produtoTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._categoriaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._produtoTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._categoriaTableAdapter != null)) {
                DataRow[] updatedRows = dataSet.Categoria.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._categoriaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._produtoTableAdapter != null)) {
                DataRow[] updatedRows = dataSet.Produto.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._produtoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet dataSet, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._categoriaTableAdapter != null)) {
                DataRow[] addedRows = dataSet.Categoria.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._categoriaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._produtoTableAdapter != null)) {
                DataRow[] addedRows = dataSet.Produto.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._produtoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet dataSet, List<DataRow> allChangedRows) {
            int result = 0;
            if ((this._produtoTableAdapter != null)) {
                DataRow[] deletedRows = dataSet.Produto.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._produtoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._categoriaTableAdapter != null)) {
                DataRow[] deletedRows = dataSet.Categoria.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._categoriaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            List<DataRow> realUpdatedRows = new List<DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(DB_EXERCICIO_MODII_CATEGORIA_PRODUTODataSet dataSet) {
            if ((dataSet == null)) {
                throw new ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._categoriaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._categoriaTableAdapter.Connection) == false))) {
                throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._produtoTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._produtoTableAdapter.Connection) == false))) {
                throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & ConnectionState.Broken) 
                        == ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            List<DataRow> allChangedRows = new List<DataRow>();
            List<DataRow> allAddedRows = new List<DataRow>();
            List<DataAdapter> adaptersWithAcceptChangesDuringUpdate = new List<DataAdapter>();
            Dictionary<object, IDbConnection> revertConnections = new Dictionary<object, IDbConnection>();
            int result = 0;
            DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._categoriaTableAdapter != null)) {
                    revertConnections.Add(this._categoriaTableAdapter, this._categoriaTableAdapter.Connection);
                    this._categoriaTableAdapter.Connection = ((SqlConnection)(workConnection));
                    this._categoriaTableAdapter.Transaction = ((SqlTransaction)(workTransaction));
                    if (this._categoriaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._categoriaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._categoriaTableAdapter.Adapter);
                    }
                }
                if ((this._produtoTableAdapter != null)) {
                    revertConnections.Add(this._produtoTableAdapter, this._produtoTableAdapter.Connection);
                    this._produtoTableAdapter.Connection = ((SqlConnection)(workConnection));
                    this._produtoTableAdapter.Transaction = ((SqlTransaction)(workTransaction));
                    if (this._produtoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._produtoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._produtoTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    DataRow[] rows = new DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    DataRow[] rows = new DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        DataRow[] rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._categoriaTableAdapter != null)) {
                    this._categoriaTableAdapter.Connection = ((SqlConnection)(revertConnections[this._categoriaTableAdapter]));
                    this._categoriaTableAdapter.Transaction = null;
                }
                if ((this._produtoTableAdapter != null)) {
                    this._produtoTableAdapter.Connection = ((SqlConnection)(revertConnections[this._produtoTableAdapter]));
                    this._produtoTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    DataAdapter[] adapters = new DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst) {
            Array.Sort<DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, IComparer<DataRow> {
            
            private DataRelation _relation;
            
            private int _childFirst;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private DataRow GetRoot(DataRow row, out int distance) {
                Debug.Assert((row != null));
                DataRow root = row;
                distance = 0;

                IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                traversedRows[row] = row;

                DataRow parent = row.GetParentRow(this._relation, DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(DataRow row1, DataRow row2) {
                if (ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                DataRow root2 = this.GetRoot(row2, out distance2);

                if (ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591